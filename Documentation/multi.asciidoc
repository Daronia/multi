Javascript continous testing
=============================
:author: Frohwalt Egerer
:email: <fe@et42.de>
:description: 
:revdate: 2012-06-03
:revnumber: 0.1
:deckjs_theme: neon
:deckjs_transition: horizontal-slide
:pygments:
:pygments_style: native
//:scrollable:
//:linkcss:

== Warum?

Ich hab da mal'n Programm geschrieben.

Bei mir geht es.

Bei Dir nicht?

=== Tests ...

* prüfen Anforderungen
* prüfen auf Fehler
* prüfen Qualität
* kosten Geld
* kosten Zeit

== Ein bisschen Theorie (1/2)

=== Welche Tests gibt es?

* Unit Tests 
* Integration Tests
* System Tests
* System Integration Tests 

* Acceptance Test 

=== Wer testet?

* Entwickler
* Tester

== Ein bisschen Theorie (2/2)
=== Wann wird getestet?

* Laufend?
* Testphasen?

=== Wo wird getestet?

* Entwicklungsrechner
* Testsystem
* Live-System

=== Es kostet Zeit und Geld!

* Man muss sich Gedanken machen, wissen was man erreichen will
* Man muss die Tests durchführen 

== Tests durchführen

=== Manuelle Tests

* Regelmäßige Arbeit
* Bis zu einem Tester pro Entwickler
* Iterationen? Schwer!

=== Tests automatisch durchführen:

* ... um Regressionen während der Entwicklung zu vermeiden
* ... Design zu erzeugen
* ... als Dokumentation
* ... für mehr Spass beim Entwickeln

Als extremste Form: TDD!

== Beispiel: Multi

Meine Tochter als Inspiration: Ein 1x1 Trainer für Zweitklässler

=== Idee

* Multi ist ein *_minimaler_* 1x1 Trainer, kann nur das allernotwendigste.
* Multi ist JavaScript im Browser ohne Server (wollte ich schon immer mal probieren)
* Multi wird von Anfang an richtig getestet
* Multi wird komplett gestestet! _(Wie die Großen? Nein, nicht so!)_

=== Freizeitprojekt

* https://github.com/froh42/multi/graphs/punch-card[Github Punch Card]

== Einschub

[quote, Sabine Egerer, Mo 2012-06-02 ]
____
Wenn Dein Votrag rum ist, sitzt Du abends aber nicht mehr so viel vor dem Computer, oder.
____

_Man beachte den Punkt anstelle eines Fragezeichens._

== Beispiel: Multi

=== Der Entwicklungsprozeß

* Anforderungen kommen ins Backlog
* Eine Anforderung ist in Progress
* Eine Anforderung ist erst done, wenn sie getestet wurde

=== Multi's Definition of Done:

Eine Story ist genau dann fertig, wenn:

* Sie das erfüllt, was ich mir vorgestellt habe. (Im echten Leben: Sie erfüllt die vorher definierten Confirmations)
* Es einen Test gibt, der die geforderten Dinge nachweist

== Tools

=== Folgende Sachen wollte ich verwenden:

* less.js
* Twitter Bootstrap
* Ein beliebiges Unit-Testing-Framework, vorzugsweise Jasmine
* ggf. Coffescript
* jslint
* Intellij Idea
* knockout.js

== Aufgabe 1: Build

=== JavaScript build?

* Less stylesheets kompilieren
* Javascript minimieren
* Coffescript übersetzen
* Tests durchführen
* Für Contious Integration vorbereiten

=== Ergebnis

* Node/npm als Packamanager für Build-Tools, Grunt als Buildtools
* Diverse Shellscripts um es flüssig zum Laufen zu kriegen

Shellscripts können evtl. in grunt als Task implementiert werden -> *Anfängerproblem*

== Aufgabe 2: Tests (1/3)

=== Ausflug: Multi Architektur

Multi verwendet MVVM:

* Das UI heißt View
* Der Zustand der Applikation steckt im Model
* Der Zustand des UI (View) steckt im ViewModel, die Logik auch

Das ViewModel vermittelt also zwischen View und Model, hat aber einen eigenen Zustand.

=== Multi Testkonzept

* Das Model wird über Unit Tests geprüft
* Das ViewModel wird über Unit Tests geprüft

"Hinten dran" gibt es einen Systemtest, der alles im Zusammenspiel durch das UI prüft.

== Aufgabe 2: Tests (2/3)

=== Exkurs: Multi Implementation

* Demo, so sieht die Implementation aus

=== Exkurs: Multi Unit Tests

* Demo, so sehen die Unit Tests aus

=== Testing in IDEA

* jsTestDriver Server
* Capture Browser(s)
* Run Tests

== Aufgabe 2: Tests (3/3)

=== Shell based test runner

* Startet Server
* Phantomjs als Ausführungsumgebung
* Man kann andere Browser hinzufügen, z.B. Firefox zum Debuggen!
* Der Server läuft weiter

== Belohnung

=== Continous Testing

* Der testrunner ist in 'grunt watch' eingebaut
* DEMO
* Tests in unter 100ms

== Aufgabe 3: Continous Integration

=== Kein eigener Server, sondern travis-ci

* Zur Zeit nur für OpenSource
* Tests laufen auf Linux
* Perfekte Integration mit GitHub

=== Travis-CI

* Hauptarbeit: Scripts so schrieben, dass sie stabil laufen


== Abgleich Praxis und Theorie

=== Multi Tests
* Testarten: Unit Test, System Test 
* Wer testet: Entwickler, automatisiertes System
* Wann: Laufend (Unit Test), Laufend (automatisierter Systemtest)
* Wo: Entwiclungsrechner, Testsystem (Travis-CI)
* Es kostet Zeit und Geld: 
** 95% Energie bisher im Umgebung, aber Hürde überwunden
** Ggf. Aufwand um Tests zu schreiben

== Ausblick
=== Was fehlt
* Manueller Abnahmetest vor Release
* Test durch Dritte (Kind!)

=== Noch mehr Fässer zum aufmachen:
* Usability Testing
* Code coverage
* Automatische Testfälle

=== Aber:
Für ein kleines Projekt ein guter erster Schritt.

=== Gentlemen, start your copiers.

== Livedemo: Erweiterung für Addition

Wenn noch Zeit ist ... let's do it. Bitte Vorschläge.


Multi verwendet
